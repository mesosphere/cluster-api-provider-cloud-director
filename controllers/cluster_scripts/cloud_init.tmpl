#cloud-config
users:
  - name: root
    lock_passwd: false
write_files:
# On first boot, cloud-init writes all files defined in userdata. At the same time,
# VMware Guest Customization configures networking, and reboots the machine when it is done.
# Any files in /run are not preserved. We need cloud-init to fetch userdata and write the
# files again. We clear the cloud-init cache, and reboot. Cloud-init thinks it is the
# first boot, and fetches the userdata, and writes the files.
- path: /root/replace-userdata-files.sh
  owner: root
  content: |
    #!/usr/bin/env bash
    function _log() {
      echo "$(date -u +"%Y-%m-%d %H:%M:%S") $@" >> /var/log/capvcd/replace-userdata-files.log
    }

    mkdir -p /var/log/capvcd

    _log "Checking for kubeadm configuration file"
    if [ -f /run/kubeadm/kubeadm.yaml ] || [ -f /run/kubeadm/kubeadm-join-config.yaml ]; then
      _log "kubeadm configuration file found, exiting"
      exit 0
    fi
    _log "kubeadm configuration file not found, cleaning cloud-init cache and rebooting"
    cloud-init clean
    reboot
- path: /root/bootstrap.sh
  owner: root
  content: |
    #!/usr/bin/env bash

    mkdir -p /var/log/capvcd
    (
      # Prefix timestamp to commands in trace output.
      PS4='$(date -u +"%Y-%m-%d %H:%M:%S")\011'
      set -o xtrace

      # Exit on the first error. Does not apply to commad lists, or pipelines.
      set -o errexit

      # Our images do not require any network customization,
      # but CAPVCD requires a successful status to finish bootstrapping.
      vmtoolsd --cmd "info-set guestinfo.postcustomization.networkconfiguration.status successful"

      # Our images do not ship the VCD metering service,
      # but CAPVCD requires a successful status to finish bootstrapping.
      vmtoolsd --cmd "info-set guestinfo.metering.status successful"

      vmtoolsd --cmd "info-set {{ if .ControlPlane -}} guestinfo.postcustomization.kubeinit.status {{- else -}} guestinfo.postcustomization.kubeadm.node.join.status {{- end }} in_progress"

      # Run the preKubeadmCommands, and then kubeadm itself.
      {{ .BootstrapRunCmd }}

      # Kubeadm is the first command in a bash "list of commands," and its failure
      # does not cause this subshell to exit. Therefore, we check the "sentinel" also created
      # in the "list of commands," and exit if it is missing.
      if [[ ! -f /run/cluster-api/bootstrap-success.complete ]]; then
        echo "file /run/cluster-api/bootstrap-success.complete not found"
        exit 1
      fi

      vmtoolsd --cmd "info-set {{ if .ControlPlane -}} guestinfo.postcustomization.kubeinit.status {{- else -}} guestinfo.postcustomization.kubeadm.node.join.status {{- end }} successful"

      exit 0
    ) &>> /var/log/capvcd/bootstrap.log
    bootstrap_exit_code=$?

    # Write the exit code to the VM metadata.
    vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_status $bootstrap_exit_code"

    # Use the last lines of the bootstrap log to give context about any failure.
    TAIL_LOG="$(tail --lines=10 /var/log/capvcd/bootstrap.log)"
    vmtoolsd --cmd "info-set guestinfo.post_customization_script_execution_failure_reason $TAIL_LOG"

    # Write cloud-init output for additional context.
    vmtoolsd --cmd "info-set guestinfo.post_customization_cloud_init_output $(</var/log/cloud-init-output.log)"
runcmd:
- bash /root/replace-userdata-files.sh
- bash /root/bootstrap.sh
timezone: UTC
disable_root: false
# Ensure we have an IPv4 address for localhost
manage_etc_hosts: localhost
# Ensure that cloud-init can override the hostname.
preserve_hostname: false
hostname: "{{ .MachineName }}"
final_message: "The system is ready after $UPTIME seconds"
